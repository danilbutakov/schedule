{"version":3,"file":"static/js/965.2b6b51df.chunk.js","mappings":"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","sources":["../node_modules/@capacitor-firebase/authentication/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nimport type {\n  AuthCredential as FirebaseAuthCredential,\n  CustomParameters,\n  User as FirebaseUser,\n  UserCredential as FirebaseUserCredential,\n} from 'firebase/auth';\nimport {\n  applyActionCode,\n  confirmPasswordReset,\n  connectAuthEmulator,\n  createUserWithEmailAndPassword,\n  EmailAuthProvider,\n  FacebookAuthProvider,\n  getAdditionalUserInfo,\n  getAuth,\n  GithubAuthProvider,\n  GoogleAuthProvider,\n  isSignInWithEmailLink,\n  linkWithCredential,\n  linkWithPopup,\n  OAuthCredential,\n  OAuthProvider,\n  sendEmailVerification,\n  sendPasswordResetEmail,\n  sendSignInLinkToEmail,\n  signInAnonymously,\n  signInWithCustomToken,\n  signInWithEmailAndPassword,\n  signInWithEmailLink,\n  signInWithPopup,\n  TwitterAuthProvider,\n  unlink,\n  updateEmail,\n  updatePassword,\n} from 'firebase/auth';\n\nimport type {\n  AdditionalUserInfo,\n  ApplyActionCodeOptions,\n  AuthCredential,\n  AuthStateChange,\n  ConfirmPasswordResetOptions,\n  CreateUserWithEmailAndPasswordOptions,\n  FirebaseAuthenticationPlugin,\n  GetCurrentUserResult,\n  GetIdTokenOptions,\n  GetIdTokenResult,\n  GetTenantIdResult,\n  IsSignInWithEmailLinkOptions,\n  IsSignInWithEmailLinkResult,\n  LinkResult,\n  LinkWithEmailAndPasswordOptions,\n  LinkWithEmailLinkOptions,\n  LinkWithOAuthOptions,\n  LinkWithPhoneNumberOptions,\n  SendPasswordResetEmailOptions,\n  SendSignInLinkToEmailOptions,\n  SetLanguageCodeOptions,\n  SetTenantIdOptions,\n  SignInOptions,\n  SignInResult,\n  SignInWithCustomTokenOptions,\n  SignInWithEmailAndPasswordOptions,\n  SignInWithEmailLinkOptions,\n  SignInWithPhoneNumberOptions,\n  UnlinkOptions,\n  UnlinkResult,\n  UpdateEmailOptions,\n  UpdatePasswordOptions,\n  UseEmulatorOptions,\n  User,\n} from './definitions';\nimport { ProviderId } from './definitions';\n\nexport class FirebaseAuthenticationWeb\n  extends WebPlugin\n  implements FirebaseAuthenticationPlugin\n{\n  public static readonly ERROR_NO_USER_SIGNED_IN = 'No user is signed in.';\n\n  constructor() {\n    super();\n    const auth = getAuth();\n    auth.onAuthStateChanged(user => this.handleAuthStateChange(user));\n  }\n\n  public async applyActionCode(options: ApplyActionCodeOptions): Promise<void> {\n    const auth = getAuth();\n    return applyActionCode(auth, options.oobCode);\n  }\n\n  public async createUserWithEmailAndPassword(\n    options: CreateUserWithEmailAndPasswordOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await createUserWithEmailAndPassword(\n      auth,\n      options.email,\n      options.password,\n    );\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async confirmPasswordReset(\n    options: ConfirmPasswordResetOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return confirmPasswordReset(auth, options.oobCode, options.newPassword);\n  }\n\n  public async getCurrentUser(): Promise<GetCurrentUserResult> {\n    const auth = getAuth();\n    const userResult = this.createUserResult(auth.currentUser);\n    const result: GetCurrentUserResult = {\n      user: userResult,\n    };\n    return result;\n  }\n\n  public async getIdToken(\n    options?: GetIdTokenOptions,\n  ): Promise<GetIdTokenResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const idToken = await auth.currentUser.getIdToken(options?.forceRefresh);\n    const result: GetIdTokenResult = {\n      token: idToken || '',\n    };\n    return result;\n  }\n\n  public async getTenantId(): Promise<GetTenantIdResult> {\n    const auth = getAuth();\n    return {\n      tenantId: auth.tenantId,\n    };\n  }\n\n  public async isSignInWithEmailLink(\n    options: IsSignInWithEmailLinkOptions,\n  ): Promise<IsSignInWithEmailLinkResult> {\n    const auth = getAuth();\n    return {\n      isSignInWithEmailLink: isSignInWithEmailLink(auth, options.emailLink),\n    };\n  }\n\n  public async linkWithApple(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new OAuthProvider(ProviderId.APPLE);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithEmailAndPassword(\n    options: LinkWithEmailAndPasswordOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const authCredential = EmailAuthProvider.credential(\n      options.email,\n      options.password,\n    );\n    const userCredential = await linkWithCredential(\n      auth.currentUser,\n      authCredential,\n    );\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithEmailLink(\n    options: LinkWithEmailLinkOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const authCredential = EmailAuthProvider.credentialWithLink(\n      options.email,\n      options.emailLink,\n    );\n    const userCredential = await linkWithCredential(\n      auth.currentUser,\n      authCredential,\n    );\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithFacebook(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new FacebookAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential =\n      FacebookAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithGithub(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new GithubAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential =\n      GithubAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithGoogle(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new GoogleAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential =\n      GoogleAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithMicrosoft(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new OAuthProvider(ProviderId.MICROSOFT);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithPhoneNumber(\n    _options: LinkWithPhoneNumberOptions,\n  ): Promise<LinkResult> {\n    throw new Error('Not implemented on web.');\n  }\n\n  public async linkWithPlayGames(): Promise<LinkResult> {\n    throw new Error('Not available on web.');\n  }\n\n  public async linkWithTwitter(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new TwitterAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential =\n      TwitterAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async linkWithYahoo(\n    options?: LinkWithOAuthOptions,\n  ): Promise<LinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const provider = new OAuthProvider(ProviderId.YAHOO);\n    this.applySignInOptions(options || {}, provider);\n    const userCredential = await linkWithPopup(auth.currentUser, provider);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async sendEmailVerification(): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return sendEmailVerification(currentUser);\n  }\n\n  public async sendPasswordResetEmail(\n    options: SendPasswordResetEmailOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return sendPasswordResetEmail(auth, options.email);\n  }\n\n  public async sendSignInLinkToEmail(\n    options: SendSignInLinkToEmailOptions,\n  ): Promise<void> {\n    const auth = getAuth();\n    return sendSignInLinkToEmail(\n      auth,\n      options.email,\n      options.actionCodeSettings,\n    );\n  }\n\n  public async setLanguageCode(options: SetLanguageCodeOptions): Promise<void> {\n    const auth = getAuth();\n    auth.languageCode = options.languageCode;\n  }\n\n  public async signInAnonymously(): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInAnonymously(auth);\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async setTenantId(options: SetTenantIdOptions): Promise<void> {\n    const auth = getAuth();\n    auth.tenantId = options.tenantId;\n  }\n\n  public async signInWithApple(options?: SignInOptions): Promise<SignInResult> {\n    const provider = new OAuthProvider(ProviderId.APPLE);\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithCustomToken(\n    options: SignInWithCustomTokenOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInWithCustomToken(auth, options.token);\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithEmailAndPassword(\n    options: SignInWithEmailAndPasswordOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      options.email,\n      options.password,\n    );\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithEmailLink(\n    options: SignInWithEmailLinkOptions,\n  ): Promise<SignInResult> {\n    const auth = getAuth();\n    const userCredential = await signInWithEmailLink(\n      auth,\n      options.email,\n      options.emailLink,\n    );\n    return this.createSignInResult(userCredential, null);\n  }\n\n  public async signInWithFacebook(\n    options?: SignInOptions,\n  ): Promise<SignInResult> {\n    const provider = new FacebookAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential =\n      FacebookAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithGithub(\n    options?: SignInOptions,\n  ): Promise<SignInResult> {\n    const provider = new GithubAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential =\n      GithubAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithGoogle(\n    options?: SignInOptions,\n  ): Promise<SignInResult> {\n    const provider = new GoogleAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential =\n      GoogleAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithMicrosoft(\n    options?: SignInOptions,\n  ): Promise<SignInResult> {\n    const provider = new OAuthProvider(ProviderId.MICROSOFT);\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithPhoneNumber(\n    _options: SignInWithPhoneNumberOptions,\n  ): Promise<SignInResult> {\n    throw new Error('Not implemented on web.');\n  }\n\n  public async signInWithPlayGames(): Promise<SignInResult> {\n    throw new Error('Not available on web.');\n  }\n\n  public async signInWithTwitter(\n    options?: SignInOptions,\n  ): Promise<SignInResult> {\n    const provider = new TwitterAuthProvider();\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential =\n      TwitterAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signInWithYahoo(options?: SignInOptions): Promise<SignInResult> {\n    const provider = new OAuthProvider(ProviderId.YAHOO);\n    this.applySignInOptions(options || {}, provider);\n    const auth = getAuth();\n    const userCredential = await signInWithPopup(auth, provider);\n    const authCredential = OAuthProvider.credentialFromResult(userCredential);\n    return this.createSignInResult(userCredential, authCredential);\n  }\n\n  public async signOut(): Promise<void> {\n    const auth = getAuth();\n    await auth.signOut();\n  }\n\n  public async unlink(options: UnlinkOptions): Promise<UnlinkResult> {\n    const auth = getAuth();\n    if (!auth.currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    const user = await unlink(auth.currentUser, options.providerId);\n    const userResult = this.createUserResult(user);\n    const result: UnlinkResult = {\n      user: userResult,\n    };\n    return result;\n  }\n\n  public async updateEmail(options: UpdateEmailOptions): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updateEmail(currentUser, options.newEmail);\n  }\n\n  public async updatePassword(options: UpdatePasswordOptions): Promise<void> {\n    const auth = getAuth();\n    const currentUser = auth.currentUser;\n    if (!currentUser) {\n      throw new Error(FirebaseAuthenticationWeb.ERROR_NO_USER_SIGNED_IN);\n    }\n    return updatePassword(currentUser, options.newPassword);\n  }\n\n  public async useAppLanguage(): Promise<void> {\n    const auth = getAuth();\n    auth.useDeviceLanguage();\n  }\n\n  public async useEmulator(options: UseEmulatorOptions): Promise<void> {\n    const auth = getAuth();\n    const port = options.port || 9099;\n    connectAuthEmulator(auth, `${options.host}:${port}`);\n  }\n\n  private handleAuthStateChange(user: FirebaseUser | null): void {\n    const userResult = this.createUserResult(user);\n    const change: AuthStateChange = {\n      user: userResult,\n    };\n    this.notifyListeners('authStateChange', change);\n  }\n\n  private applySignInOptions(\n    options: SignInOptions,\n    provider: OAuthProvider | GoogleAuthProvider | FacebookAuthProvider,\n  ) {\n    if (options.customParameters) {\n      const customParameters: CustomParameters = {};\n      options.customParameters.map(parameter => {\n        customParameters[parameter.key] = parameter.value;\n      });\n      provider.setCustomParameters(customParameters);\n    }\n    if (options.scopes) {\n      for (const scope of options.scopes) {\n        provider.addScope(scope);\n      }\n    }\n  }\n\n  private createSignInResult(\n    userCredential: FirebaseUserCredential,\n    authCredential: FirebaseAuthCredential | null,\n  ): SignInResult {\n    const userResult = this.createUserResult(userCredential.user);\n    const credentialResult = this.createCredentialResult(authCredential);\n    const additionalUserInfoResult =\n      this.createAdditionalUserInfoResult(userCredential);\n    const result: SignInResult = {\n      user: userResult,\n      credential: credentialResult,\n      additionalUserInfo: additionalUserInfoResult,\n    };\n    return result;\n  }\n\n  private createCredentialResult(\n    credential: FirebaseAuthCredential | null,\n  ): AuthCredential | null {\n    if (!credential) {\n      return null;\n    }\n    const result: AuthCredential = {\n      providerId: credential.providerId,\n    };\n    if (credential instanceof OAuthCredential) {\n      result.accessToken = credential.accessToken;\n      result.idToken = credential.idToken;\n      result.secret = credential.secret;\n    }\n    return result;\n  }\n\n  private createUserResult(user: FirebaseUser | null): User | null {\n    if (!user) {\n      return null;\n    }\n    const result: User = {\n      displayName: user.displayName,\n      email: user.email,\n      emailVerified: user.emailVerified,\n      isAnonymous: user.isAnonymous,\n      phoneNumber: user.phoneNumber,\n      photoUrl: user.photoURL,\n      providerId: user.providerId,\n      tenantId: user.tenantId,\n      uid: user.uid,\n    };\n    return result;\n  }\n\n  private createAdditionalUserInfoResult(\n    credential: FirebaseUserCredential,\n  ): AdditionalUserInfo | null {\n    const additionalUserInfo = getAdditionalUserInfo(credential);\n    if (!additionalUserInfo) {\n      return null;\n    }\n    const { isNewUser, profile, providerId, username } = additionalUserInfo;\n    const result: AdditionalUserInfo = {\n      isNewUser,\n    };\n    if (providerId !== null) {\n      result.providerId = providerId;\n    }\n    if (profile !== null) {\n      result.profile = profile as { [key: string]: unknown };\n    }\n    if (username !== null && username !== undefined) {\n      result.username = username;\n    }\n    return result;\n  }\n}\n"],"names":["FirebaseAuthenticationWeb","getAuth","onAuthStateChanged","user","handleAuthStateChange","options","auth","applyActionCode","oobCode","createUserWithEmailAndPassword","email","password","userCredential","this","createSignInResult","confirmPasswordReset","newPassword","userResult","createUserResult","currentUser","result","Error","ERROR_NO_USER_SIGNED_IN","getIdToken","forceRefresh","idToken","token","tenantId","isSignInWithEmailLink","emailLink","provider","OAuthProvider","ProviderId","applySignInOptions","linkWithPopup","authCredential","EmailAuthProvider","linkWithCredential","FacebookAuthProvider","GithubAuthProvider","GoogleAuthProvider","_options","TwitterAuthProvider","sendEmailVerification","sendPasswordResetEmail","sendSignInLinkToEmail","actionCodeSettings","languageCode","signInAnonymously","signInWithPopup","signInWithCustomToken","signInWithEmailAndPassword","signInWithEmailLink","signOut","unlink","providerId","updateEmail","newEmail","updatePassword","useDeviceLanguage","port","connectAuthEmulator","host","change","notifyListeners","customParameters","map","parameter","key","value","setCustomParameters","scopes","scope","addScope","credential","createCredentialResult","additionalUserInfo","createAdditionalUserInfoResult","OAuthCredential","accessToken","secret","displayName","emailVerified","isAnonymous","phoneNumber","photoUrl","photoURL","uid","getAdditionalUserInfo","isNewUser","profile","username","undefined","WebPlugin"],"sourceRoot":""}